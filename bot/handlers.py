"""Telegram bot message handlers."""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from database.database import SessionLocal
from database.crud import (
    get_user_by_telegram_id,
    get_user_by_phone,
    create_user,
    get_chats_by_role
)
from bot.keyboards import get_phone_keyboard, get_remove_keyboard
from bot.utils import normalize_phone, validate_phone, format_chat_links

logger = logging.getLogger(__name__)

# User states
AWAITING_PHONE = 1

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        # Check if user already exists
        existing_user = get_user_by_telegram_id(db, user.id)
        
        if existing_user:
            if existing_user.status == 'pending':
                await update.message.reply_text(
                    "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=get_remove_keyboard()
                )
            elif existing_user.status == 'approved':
                await update.message.reply_text(
                    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mychats —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —á–∞—Ç—ã.",
                    reply_markup=get_remove_keyboard()
                )
            elif existing_user.status == 'rejected':
                await update.message.reply_text(
                    "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                    reply_markup=get_remove_keyboard()
                )
        else:
            # New user - request phone number
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫ —á–∞—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
                "üì± –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
                "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
                reply_markup=get_phone_keyboard()
            )
            context.user_data['state'] = AWAITING_PHONE
    
    finally:
        db.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command."""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏\n"
        "/mychats - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —á–∞—Ç—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await update.message.reply_text(help_text, reply_markup=get_remove_keyboard())

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        existing_user = get_user_by_telegram_id(db, user.id)
        
        if not existing_user:
            await update.message.reply_text(
                "‚ùì –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=get_remove_keyboard()
            )
        else:
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå'
            }
            status_text = {
                'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è',
                'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            }
            
            message = (
                f"{status_emoji.get(existing_user.status, '‚ùì')} –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: "
                f"{status_text.get(existing_user.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )
            
            if existing_user.role:
                message += f"üë§ –†–æ–ª—å: {existing_user.role.name}\n"
            
            if existing_user.status == 'approved':
                message += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mychats —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —á–∞—Ç—ã."
            
            await update.message.reply_text(message, reply_markup=get_remove_keyboard())
    
    finally:
        db.close()

async def mychats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /mychats command."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        existing_user = get_user_by_telegram_id(db, user.id)
        
        if not existing_user:
            await update.message.reply_text(
                "‚ùì –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=get_remove_keyboard()
            )
        elif existing_user.status != 'approved':
            await update.message.reply_text(
                "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_remove_keyboard()
            )
        elif not existing_user.role:
            await update.message.reply_text(
                "‚ö†Ô∏è –í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_remove_keyboard()
            )
        else:
            chats = get_chats_by_role(db, existing_user.role_id)
            message = format_chat_links(chats)
            await update.message.reply_text(message, reply_markup=get_remove_keyboard())
    
    finally:
        db.close()

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle contact (phone number) sharing."""
    user = update.effective_user
    contact = update.message.contact
    
    # Verify that the contact is from the user themselves
    if contact.user_id != user.id:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=get_phone_keyboard()
        )
        return
    
    phone = normalize_phone(contact.phone_number)
    db = SessionLocal()
    
    try:
        # Check if phone already exists
        existing_user = get_user_by_phone(db, phone)
        
        if existing_user:
            if existing_user.telegram_id == user.id:
                await update.message.reply_text(
                    "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=get_remove_keyboard()
                )
            else:
                # Update telegram_id if phone exists but with different telegram_id
                existing_user.telegram_id = user.id
                existing_user.username = user.username
                existing_user.first_name = user.first_name
                existing_user.last_name = user.last_name
                db.commit()
                
                await update.message.reply_text(
                    "‚úÖ –í–∞—à Telegram ID –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=get_remove_keyboard()
                )
        else:
            # Create new user
            create_user(
                db,
                phone_number=phone,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.",
                reply_markup=get_remove_keyboard()
            )
            
            logger.info(f"New user request: {phone} (Telegram ID: {user.id})")
        
        context.user_data.pop('state', None)
    
    finally:
        db.close()

async def handle_text_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle phone number sent as text."""
    user = update.effective_user
    phone_text = update.message.text
    
    # Check if user is in phone input state
    if context.user_data.get('state') != AWAITING_PHONE:
        return
    
    # Validate phone
    if not validate_phone(phone_text):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ "
            "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_phone_keyboard()
        )
        return
    
    phone = normalize_phone(phone_text)
    db = SessionLocal()
    
    try:
        # Check if phone already exists
        existing_user = get_user_by_phone(db, phone)
        
        if existing_user:
            if existing_user.telegram_id == user.id:
                await update.message.reply_text(
                    "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=get_remove_keyboard()
                )
            else:
                # Update telegram_id if phone exists but with different telegram_id
                existing_user.telegram_id = user.id
                existing_user.username = user.username
                existing_user.first_name = user.first_name
                existing_user.last_name = user.last_name
                db.commit()
                
                await update.message.reply_text(
                    "‚úÖ –í–∞—à Telegram ID –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=get_remove_keyboard()
                )
        else:
            # Create new user
            create_user(
                db,
                phone_number=phone,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.",
                reply_markup=get_remove_keyboard()
            )
            
            logger.info(f"New user request: {phone} (Telegram ID: {user.id})")
        
        context.user_data.pop('state', None)
    
    finally:
        db.close()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

