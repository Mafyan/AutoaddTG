"""Telegram bot message handlers."""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from database.database import SessionLocal
from database.crud import (
    get_user_by_telegram_id,
    get_user_by_phone,
    create_user,
    get_chats_by_role,
    add_chat_member,
    get_admin_by_telegram_id,
    create_chat,
    get_chat_by_chat_id,
    update_chat
)
from bot.chat_manager import ChatManager
from config import settings
from bot.keyboards import get_phone_keyboard, get_remove_keyboard
from bot.utils import normalize_phone, validate_phone, format_chat_links

logger = logging.getLogger(__name__)

# User states
AWAITING_PHONE = 1
AWAITING_NAME = 2
AWAITING_POSITION = 3

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        # Check if user already exists
        existing_user = get_user_by_telegram_id(db, user.id)
        
        if existing_user:
            if existing_user.status == 'pending':
                await update.message.reply_text(
                    "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=get_remove_keyboard()
                )
            elif existing_user.status == 'approved':
                await update.message.reply_text(
                    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mychats —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —á–∞—Ç—ã.",
                    reply_markup=get_remove_keyboard()
                )
            elif existing_user.status == 'rejected':
                await update.message.reply_text(
                    "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                    reply_markup=get_remove_keyboard()
                )
        else:
            # New user - request phone number
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫ —á–∞—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
                "üì± –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
                "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
                reply_markup=get_phone_keyboard()
            )
            context.user_data['state'] = AWAITING_PHONE
    
    finally:
        db.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command."""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏\n"
        "/mychats - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —á–∞—Ç—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await update.message.reply_text(help_text, reply_markup=get_remove_keyboard())

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        existing_user = get_user_by_telegram_id(db, user.id)
        
        if not existing_user:
            await update.message.reply_text(
                "‚ùì –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=get_remove_keyboard()
            )
        else:
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå'
            }
            status_text = {
                'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è',
                'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            }
            
            message = (
                f"{status_emoji.get(existing_user.status, '‚ùì')} –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: "
                f"{status_text.get(existing_user.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            )
            
            if existing_user.role:
                message += f"üë§ –†–æ–ª—å: {existing_user.role.name}\n"
            
            if existing_user.status == 'approved':
                message += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mychats —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —á–∞—Ç—ã."
            
            await update.message.reply_text(message, reply_markup=get_remove_keyboard())
    
    finally:
        db.close()

async def mychats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /mychats command - creates new temporary invite links. Limited to once per 48 hours."""
    from datetime import datetime, timedelta
    user = update.effective_user
    db = SessionLocal()
    
    try:
        existing_user = get_user_by_telegram_id(db, user.id)
        
        if not existing_user:
            await update.message.reply_text(
                "‚ùì –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=get_remove_keyboard()
            )
        elif existing_user.status == 'fired':
            await update.message.reply_text(
                "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=get_remove_keyboard()
            )
        elif existing_user.status != 'approved':
            await update.message.reply_text(
                "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_remove_keyboard()
            )
        elif not existing_user.role:
            await update.message.reply_text(
                "‚ö†Ô∏è –í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_remove_keyboard()
            )
        else:
            # Check if user can request links (48 hours cooldown)
            now = datetime.utcnow()
            cooldown_hours = 48
            
            if existing_user.last_links_request:
                time_since_last_request = now - existing_user.last_links_request
                hours_passed = time_since_last_request.total_seconds() / 3600
                
                if hours_passed < cooldown_hours:
                    # Calculate remaining time
                    hours_remaining = cooldown_hours - hours_passed
                    days = int(hours_remaining // 24)
                    hours = int(hours_remaining % 24)
                    minutes = int((hours_remaining % 1) * 60)
                    
                    time_str = ""
                    if days > 0:
                        time_str += f"{days} –¥. "
                    if hours > 0:
                        time_str += f"{hours} —á. "
                    time_str += f"{minutes} –º–∏–Ω."
                    
                    await update.message.reply_text(
                        f"‚è±Ô∏è –í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–∞–≤–Ω–æ.\n\n"
                        f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {time_str}\n\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {existing_user.last_links_request.strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"‚ÑπÔ∏è –°—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑ –≤ 48 —á–∞—Å–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                        reply_markup=get_remove_keyboard()
                    )
                    return
            
            # Create new temporary invite links (12 hours, single use)
            from bot.chat_manager import ChatManager
            chat_manager = ChatManager(settings.BOT_TOKEN)
            
            await update.message.reply_text(
                "üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏...",
                reply_markup=get_remove_keyboard()
            )
            
            temp_links = await chat_manager.get_role_temporary_invite_links(existing_user.role_id, hours=12)
            
            message = (
                f"üîó –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã:\n"
                f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 12 —á–∞—Å–æ–≤\n"
                f"üë§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: 1 —Ä–∞–∑\n\n"
            )
            
            # Add links
            for idx, link_info in enumerate(temp_links, 1):
                if link_info['success'] and link_info['invite_link']:
                    message += f"{idx}. {link_info['chat_name']}\n{link_info['invite_link']}\n\n"
                else:
                    message += f"{idx}. {link_info['chat_name']} - ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏\n\n"
            
            message += (
                f"‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
                f"‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ 12 —á–∞—Å–æ–≤\n"
                f"‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è (1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)\n"
                f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤\n"
                f"‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–∞—Ç–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
            )
            
            await update.message.reply_text(
                message,
                reply_markup=get_remove_keyboard(),
                disable_web_page_preview=True
            )
            
            # Update last request time
            existing_user.last_links_request = now
            db.commit()
            logger.info(f"User {user.id} requested chat links. Next request available in 48 hours.")
    
    finally:
        db.close()

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle contact (phone number) sharing."""
    user = update.effective_user
    contact = update.message.contact
    
    # Verify that the contact is from the user themselves
    if contact.user_id != user.id:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=get_phone_keyboard()
        )
        return
    
    phone = normalize_phone(contact.phone_number)
    db = SessionLocal()
    
    try:
        # Check if phone already exists
        existing_user = get_user_by_phone(db, phone)
        
        if existing_user:
            if existing_user.telegram_id == user.id:
                await update.message.reply_text(
                    "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=get_remove_keyboard()
                )
                context.user_data.pop('state', None)
            else:
                # Update telegram_id if phone exists but with different telegram_id
                existing_user.telegram_id = user.id
                existing_user.username = user.username
                db.commit()
                
                await update.message.reply_text(
                    "‚úÖ –í–∞—à Telegram ID –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                    reply_markup=get_remove_keyboard()
                )
                context.user_data.pop('state', None)
        else:
            # Save phone and request name
            context.user_data['phone'] = phone
            context.user_data['state'] = AWAITING_NAME
            
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ!\n\n"
                "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
                reply_markup=get_remove_keyboard()
            )
    
    finally:
        db.close()

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Universal handler for all text messages based on user state."""
    user = update.effective_user
    state = context.user_data.get('state')
    text = update.message.text.strip()
    
    # Handle AWAITING_PHONE state
    if state == AWAITING_PHONE:
        # Validate phone
        if not validate_phone(text):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ "
                "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                reply_markup=get_phone_keyboard()
            )
            return
        
        phone = normalize_phone(text)
        db = SessionLocal()
        
        try:
            # Check if phone already exists
            existing_user = get_user_by_phone(db, phone)
            
            if existing_user:
                if existing_user.telegram_id == user.id:
                    await update.message.reply_text(
                        "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                        reply_markup=get_remove_keyboard()
                    )
                    context.user_data.pop('state', None)
                else:
                    # Update telegram_id if phone exists but with different telegram_id
                    existing_user.telegram_id = user.id
                    existing_user.username = user.username
                    db.commit()
                    
                    await update.message.reply_text(
                        "‚úÖ –í–∞—à Telegram ID –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.",
                        reply_markup=get_remove_keyboard()
                    )
                    context.user_data.pop('state', None)
            else:
                # Save phone and request name
                context.user_data['phone'] = phone
                context.user_data['state'] = AWAITING_NAME
                
                await update.message.reply_text(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ!\n\n"
                    "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:\n"
                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)",
                    reply_markup=get_remove_keyboard()
                )
        finally:
            db.close()
        return
    
    # Handle AWAITING_NAME state
    elif state == AWAITING_NAME:
        # Basic validation - check if name contains at least 2 words
        name_parts = text.split()
        if len(name_parts) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                reply_markup=get_remove_keyboard()
            )
            return
        
        # Save first name and last name
        first_name = name_parts[0]
        last_name = ' '.join(name_parts[1:])  # In case there are multiple parts in last name
        
        context.user_data['first_name'] = first_name
        context.user_data['last_name'] = last_name
        context.user_data['state'] = AWAITING_POSITION
        
        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {first_name} {last_name}!\n\n"
            "üíº –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º)",
            reply_markup=get_remove_keyboard()
        )
        return
    
    # Handle AWAITING_POSITION state
    elif state == AWAITING_POSITION:
        position_text = text
        
        # Basic validation
        if len(position_text) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
                reply_markup=get_remove_keyboard()
            )
            return
        
        # Get saved data
        phone = context.user_data.get('phone')
        first_name = context.user_data.get('first_name')
        last_name = context.user_data.get('last_name')
        
        if not phone or not first_name or not last_name:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=get_remove_keyboard()
            )
            context.user_data.clear()
            return
        
        db = SessionLocal()
        
        try:
            # Create new user with full information
            create_user(
                db,
                phone_number=phone,
                telegram_id=user.id,
                username=user.username,
                first_name=first_name,
                last_name=last_name,
                position=position_text
            )
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"üë§ –ò–º—è: {first_name} {last_name}\n"
                f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position_text}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.",
                reply_markup=get_remove_keyboard()
            )
            
            logger.info(f"New user request: {first_name} {last_name} ({position_text}) - {phone} (Telegram ID: {user.id})")
            
            # Clear user data
            context.user_data.clear()
        finally:
            db.close()
        return

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def list_chats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /listchats command for admins."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        # Check if user is admin
        admin = get_admin_by_telegram_id(db, user.id)
        if not admin:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # Get all chats where bot is a member
        chat_manager = ChatManager(settings.BOT_TOKEN)
        chats = await chat_manager.get_bot_chats()
        
        if not chats:
            await update.message.reply_text("ü§ñ –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
            return
        
        # Format response
        message = "üìã **–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç:**\n\n"
        
        for i, chat in enumerate(chats, 1):
            message += f"{i}. **{chat['title']}**\n"
            message += f"   ID: `{chat['id']}`\n"
            message += f"   –¢–∏–ø: {chat['type']}\n"
            if chat['username']:
                message += f"   Username: @{chat['username']}\n"
            if chat['invite_link']:
                message += f"   [–°—Å—ã–ª–∫–∞]({chat['invite_link']})\n"
            message += "\n"
        
        # Split message if too long
        if len(message) > 4000:
            chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
            for chunk in chunks:
                await update.message.reply_text(chunk, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error in list_chats_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.")
    finally:
        db.close()

async def sync_chats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /syncchats command for admins."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        # Check if user is admin
        admin = get_admin_by_telegram_id(db, user.id)
        if not admin:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–∞—Ç–æ–≤...")
        
        # Sync chats to database
        chat_manager = ChatManager(settings.BOT_TOKEN)
        results = await chat_manager.sync_chats_to_database(db)
        
        message = f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
        message += f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {results['total_found']}\n"
        message += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {results['created']}\n"
        message += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}\n"
        message += f"‚Ä¢ –û—à–∏–±–æ–∫: {results['errors']}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error in sync_chats_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤.")
    finally:
        db.close()

async def handle_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bot being added to or removed from chats."""
    db = SessionLocal()
    
    try:
        my_chat_member = update.my_chat_member
        chat = my_chat_member.chat
        old_status = my_chat_member.old_chat_member.status
        new_status = my_chat_member.new_chat_member.status
        
        print(f"DEBUG: Bot status changed in chat {chat.id} ({chat.title})")
        print(f"DEBUG: From {old_status} to {new_status}")
        
        # Only process group chats
        if chat.type not in ['group', 'supergroup']:
            return
        
        # Bot was added to chat
        if old_status in ['left', 'kicked'] and new_status == 'member':
            print(f"DEBUG: Bot added to chat {chat.id}")
            await _add_chat_to_database(db, chat)
            
            # Trigger chat sync to update web panel
            try:
                from bot.chat_manager import ChatManager
                chat_manager = ChatManager(settings.BOT_TOKEN)
                await chat_manager.sync_chats_to_database(db)
                print(f"DEBUG: Synced chats to database after bot addition")
            except Exception as e:
                print(f"DEBUG: Error syncing chats: {e}")
            
        # Bot was removed from chat
        elif old_status == 'member' and new_status in ['left', 'kicked']:
            print(f"DEBUG: Bot removed from chat {chat.id}")
            # You can add logic here to mark chat as inactive if needed
            
    except Exception as e:
        logger.error(f"Error in handle_my_chat_member: {e}")
    finally:
        db.close()

async def _add_chat_to_database(db: SessionLocal, chat):
    """Add chat to database when bot is added."""
    try:
        # Check if chat already exists
        existing_chat = get_chat_by_chat_id(db, chat.id)
        
        if existing_chat:
            # Update existing chat
            update_chat(db, existing_chat.id, 
                       chat_name=chat.title,
                       chat_link=None)  # Will be updated later
            print(f"DEBUG: Updated existing chat {chat.title}")
        else:
            # Create new chat
            chat_obj = create_chat(db, 
                                 chat_name=chat.title,
                                 chat_link=None,
                                 chat_id=chat.id,
                                 description=f"Auto-added {chat.type} chat")
            print(f"DEBUG: Created new chat {chat.title} with ID {chat_obj.id}")
            
            # Try to get invite link
            try:
                from telegram import Bot
                bot = Bot(token=settings.BOT_TOKEN)
                invite_link = await bot.export_chat_invite_link(chat.id)
                update_chat(db, chat_obj.id, chat_link=invite_link)
                print(f"DEBUG: Got invite link for {chat.title}")
            except Exception as e:
                print(f"DEBUG: Could not get invite link for {chat.title}: {e}")
                
    except Exception as e:
        logger.error(f"Error adding chat to database: {e}")

async def handle_message_in_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle messages in groups to track chat activity."""
    db = SessionLocal()
    
    try:
        chat = update.effective_chat
        
        # Only process group chats
        if chat.type not in ['group', 'supergroup']:
            return
            
        # Check if this is a new chat for us
        existing_chat = get_chat_by_chat_id(db, chat.id)
        if not existing_chat:
            print(f"DEBUG: New group chat detected: {chat.title} (ID: {chat.id})")
            await _add_chat_to_database(db, chat)
            
            # Trigger chat sync to update web panel
            try:
                from bot.chat_manager import ChatManager
                chat_manager = ChatManager(settings.BOT_TOKEN)
                await chat_manager.sync_chats_to_database(db)
                print(f"DEBUG: Synced chats to database after new chat detection")
            except Exception as e:
                print(f"DEBUG: Error syncing chats: {e}")
            
    except Exception as e:
        logger.error(f"Error in handle_message_in_group: {e}")
    finally:
        db.close()

async def sync_members_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /syncmembers command for admins."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        # Check if user is admin
        admin = get_admin_by_telegram_id(db, user.id)
        if not admin:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # Get chat ID from command arguments or current chat
        chat_id = None
        if context.args:
            try:
                chat_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /syncmembers <chat_id>")
                return
        else:
            # Use current chat if it's a group
            if update.effective_chat.type in ['group', 'supergroup']:
                chat_id = update.effective_chat.id
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ Chat ID: /syncmembers <chat_id>")
                return
        
        await update.message.reply_text(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}...")
        
        # Sync chat members
        chat_manager = ChatManager(settings.BOT_TOKEN)
        results = await chat_manager.sync_chat_members(chat_id, db)
        
        message = f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        message += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {results['total_members']}\n"
        message += f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {results['authorized_members']}\n"
        message += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {results['removed_unauthorized']}\n"
        message += f"‚Ä¢ –û—à–∏–±–æ–∫: {results['errors']}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error in sync_members_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    finally:
        db.close()

async def refresh_members_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /refreshmembers command for admins - force refresh chat members."""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        # Check if user is admin
        admin = get_admin_by_telegram_id(db, user.id)
        if not admin:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # Get chat ID from command arguments or current chat
        chat_id = None
        if context.args:
            try:
                chat_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /refreshmembers <chat_id>")
                return
        else:
            # Use current chat if it's a group
            if update.effective_chat.type in ['group', 'supergroup']:
                chat_id = update.effective_chat.id
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ Chat ID: /refreshmembers <chat_id>")
                return
        
        await update.message.reply_text(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}...")
        
        # Force refresh chat members
        chat_manager = ChatManager(settings.BOT_TOKEN)
        
        # Get all members from recent activity
        members = await chat_manager.get_chat_members_from_telegram(chat_id)
        
        message = f"üìã **–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ {chat_id}:**\n\n"
        
        for i, member in enumerate(members, 1):
            message += f"{i}. **{member.get('first_name', 'Unknown')}**\n"
            message += f"   ID: `{member['id']}`\n"
            if member.get('username'):
                message += f"   Username: @{member['username']}\n"
            message += f"   Admin: {'–î–∞' if member.get('is_admin') else '–ù–µ—Ç'}\n"
            message += f"   Bot: {'–î–∞' if member.get('is_bot') else '–ù–µ—Ç'}\n\n"
        
        # Split message if too long
        if len(message) > 4000:
            chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
            for chunk in chunks:
                await update.message.reply_text(chunk, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error in refresh_members_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    finally:
        db.close()

