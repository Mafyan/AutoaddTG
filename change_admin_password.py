"""Script to change admin password."""
import getpass
import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from database.database import SessionLocal
from database.crud import get_admin_by_username, update_admin_password
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def generate_strong_password():
    """Generate a strong random password."""
    import secrets
    import string
    
    # Generate 16 character password with letters, digits, and special chars
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    password = ''.join(secrets.choice(alphabet) for _ in range(16))
    return password

def change_password():
    """Change admin password."""
    print("="*60)
    print("üîê –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
    print("="*60)
    
    # Get username
    username = input("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin): ").strip()
    if not username:
        username = "admin"
    
    db = SessionLocal()
    try:
        # Check if admin exists
        admin = get_admin_by_username(db, username)
        if not admin:
            print(f"\n‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"\n‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {username}")
        
        # Ask for password option
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
        print("1. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
        print("2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
        
        if choice == "2":
            # Generate random password
            new_password = generate_strong_password()
            print(f"\nüîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
            print(f"{'='*60}")
            print(f"   {new_password}")
            print(f"{'='*60}")
            print("‚ö†Ô∏è  –°–û–•–†–ê–ù–ò–¢–ï –ï–ì–û –í –ë–ï–ó–û–ü–ê–°–ù–û–ú –ú–ï–°–¢–ï!")
            
            confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è? (y/n): ").strip().lower()
            if confirm != 'y':
                print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        else:
            # Manual password input
            while True:
                new_password = getpass.getpass("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
                if len(new_password) < 8:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!")
                    continue
                
                confirm_password = getpass.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                if new_password != confirm_password:
                    print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                    continue
                
                # Check password strength
                has_upper = any(c.isupper() for c in new_password)
                has_lower = any(c.islower() for c in new_password)
                has_digit = any(c.isdigit() for c in new_password)
                has_special = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in new_password)
                
                strength = sum([has_upper, has_lower, has_digit, has_special])
                
                if strength < 3:
                    print("\n‚ö†Ô∏è  –°–õ–ê–ë–´–ô –ü–ê–†–û–õ–¨! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
                    print("   - –ó–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
                    print("   - –¶–∏—Ñ—Ä—ã")
                    print("   - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
                    retry = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ —Å–ª–∞–±—ã–º –ø–∞—Ä–æ–ª–µ–º? (y/n): ").strip().lower()
                    if retry != 'y':
                        continue
                
                break
        
        # Update password
        password_hash = pwd_context.hash(new_password)
        
        from database.models import Admin
        admin.password_hash = password_hash
        db.commit()
        
        print("\n" + "="*60)
        print("‚úÖ –ü–ê–†–û–õ–¨ –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù!")
        print("="*60)
        print(f"\n–õ–æ–≥–∏–Ω: {username}")
        print(f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    change_password()

